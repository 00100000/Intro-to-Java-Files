    encrypt String s  {
        removeWhitespaceAndCovertToUpper s  
        substitute s  
        swapHalfsForEncrypt s  
        swapFirst2WithLast2 s  
        swapMiddleChars s

        return s
    }
     removeWhitespaceAndCovertToUpper String s  {
        trim s
        toUpperCase s

        return s
    }
     substitute String s  {
        replaceAll "A"  with "@"  
        replaceAll "E"  with "="  
        replaceAll "I"  with "!"  
        replaceAll "J"  with "?"  
        replaceAll "O"  with "*"  
        replaceAll "P"  with "#"  
        replaceAll "R"  with "&"  
        replaceAll "S"  with "$"  
        replaceAll "T"  with "+"  
        replaceAll "V"  with "^"  
        replaceAll "X"  with "%"  
        replaceAll " "  with "_"

        return s
    }
     swapHalfsForEncrypt String s  {
        String firstHalf, secondHalf 
        
        if length is even {
            firstHalf = subString (0, length / 2)
            secondHalf = subString (length / 2, length - 1)
        } else {
            firstHalf = subString (0, length / 2  + 1)
            secondHalf = subString (length / 2  + 1, length - 1)
        }
        
        return secondHalf + firstHalf 
    }
     swapFirst2WithLast2 String s {
        String body = subString (2,  length - 3)
        String first2 = subString (0, 1)
        String last2 = subString (length - 2, length - 1)
        
        return last2 + body + first2 
    }
     swapMiddleChars String s  {
        String body1, body2, middle1, middle2 
        
        if length is even {
            body1 = subString (0, length / 2  - 2)
            middle1 = subString  (length / 2  - 2 , length / 2)
            middle2 = subString (length / 2,  length / 2  + 2)
            body2 = subString  (length / 2  + 2, length - 1)
        } else {
            body1 = subString (0,  length   / 2  - 1)
            middle1 = subString  (length   / 2  - 1 , length   / 2 + 1)
            middle2 = subString (length   / 2 + 1,  length   / 2  + 3)
            body2 = subString  (length   / 2  + 3, length   - 1)
        }
        
        return body1 + middle2 + middle1 + body2 
    }
